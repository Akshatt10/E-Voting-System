version: '3.8'

services:
  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - ./backend/.env
    # --- MODIFIED: Added depends_on with a healthcheck condition ---
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network

  # Database Service
  db:
    image: postgres:16
    container_name: db # It's better practice to use the service name 'db'
    restart: always
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin123
      - POSTGRES_DB=E-Voting-db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    # --- NEW: Added a healthcheck to ensure the DB is ready ---
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d E-Voting-db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Adminer Service
  adminer:
    image: adminer
    container_name: adminer-UI
    restart: always
    ports:
      - "8080:8080"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
