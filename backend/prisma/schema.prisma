generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  firstname    String?
  lastname     String?
  phone        String?        @unique
  passwordHash String
  role         Role           @default(VOTER)
  verified     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  test         Boolean        @default(false)

  votes        Vote[]
  auditLogs    AuditLog[]
  refreshTokens RefreshToken[]  
}

model RefreshToken {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  createdAt DateTime  @default(now())
  expiresAt DateTime
  isRevoked Boolean   @default(false)

  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Election {
  id          String      @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  status      VoteStatus @default(SCHEDULED)

  candidates  Candidate[]
  votes       Vote[]
}

model Candidate {
  id          String     @id @default(cuid())
  name        String
  email       String?    
  description String?
  electionId  String
  election    Election   @relation(fields: [electionId], references: [id])

  votes       Vote[]
}

model Vote {
  id          String     @id @default(cuid())
  userId      String
  electionId  String
  candidateId String
  createdAt   DateTime   @default(now())

  user        User       @relation(fields: [userId], references: [id])
  election    Election   @relation(fields: [electionId], references: [id])
  candidate   Candidate  @relation(fields: [candidateId], references: [id])

  @@unique([userId, electionId])
}

model AuditLog {
  id        String    @id @default(cuid())
  userId    String
  action    String
  meta      Json?
  timestamp DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id])
}

model OTP {
  id         String    @id @default(cuid())
  email      String
  code       String
  expiresAt  DateTime
  used       Boolean   @default(false)
  createdAt  DateTime  @default(now())
}

enum Role {
  ADMIN
  VOTER
}

enum VoteStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}
