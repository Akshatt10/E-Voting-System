generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  IBBI         String?  @unique
  firstname    String?
  lastname     String?
  phone        String?  @unique
  passwordHash String
  role         Role     @default(VOTER)
  verified     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  elections     Election[]
  auditLogs     AuditLog[]
  refreshTokens RefreshToken[]
  payments      Payment[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  isRevoked Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}
model Election {
  id          String       @id @default(cuid())
  Matter      String?
  title       String
  startTime   DateTime
  endTime     DateTime
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  status      VoteStatus   @default(SCHEDULED)
  createdById String
  createdBy   User         @relation(fields: [createdById], references: [id], onDelete: Cascade)

  candidates  Candidate[]
  resolutions Resolution[]
}

model Resolution {
  id              String  @id @default(cuid())
  title           String
  description     String?
  
  agreeLabel      String  @default("Agree")
  disagreeLabel   String  @default("Disagree")
  abstainLabel    String  @default("Abstain from voting")
  
  electionId      String
  election        Election @relation(fields: [electionId], references: [id], onDelete: Cascade)
  
  votes           Vote[] // <-- This links a resolution to its votes
}

model Candidate {
  id          String   @id @default(cuid())
  name        String
  email       String?
  share       Float    @default(0.0)
  
  electionId  String
  election    Election @relation(fields: [electionId], references: [id], onDelete: Cascade)

  votes       Vote[] // <-- This links a candidate to their votes
}
model Vote {
  id           String     @id @default(cuid())
  choice       VoteChoice // Stores the actual vote (e.g., ACCEPT)
  createdAt    DateTime   @default(now())

  // Relation to the candidate who voted
  candidateId  String
  candidate    Candidate  @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  
  // Relation to the specific resolution being voted on
  resolutionId String
  resolution   Resolution @relation(fields: [resolutionId], references: [id], onDelete: Cascade)

  // This ensures a candidate can only vote ONCE per resolution.
  @@unique([candidateId, resolutionId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  meta      Json?
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  electionId    String
  amount        Float    @default(500.00)
  currency      String   @default("INR")
  status        PaymentStatus @default(SUCCESS)
  paymentMethod String?
  transactionId String?  @unique
  refundStatus  RefundStatus @default(NOT_REFUNDED)
  refundedAt    DateTime?
  refundTransactionId String?
  createdAt     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([electionId])
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

enum RefundStatus {
  NOT_REFUNDED
  REFUND_INITIATED
  REFUNDED
  REFUND_FAILED
}

model OTP {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  VOTER
}

enum VoteStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}
enum VoteChoice {
  ACCEPT
  REJECT
  ABSTAIN
}